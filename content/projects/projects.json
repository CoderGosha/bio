[
  {
    "name": "Ad Notify Manager",
    "work_period": "2022",
    "site": "https://github.com/CoderGosha/AdNotifyManager",
    "description": {
      "description": "Новая генерация системы уведомления о новых объявления. Система состоит из трех частей: веб интерфейс, модули парсинга, модули уведомления\n\tВеб  интерфейс позволяет конфигурировать настройки парсеров, подписчиков и удобно распределять запросы между модулями парсинга (инстансами)\n\tМодули парсинга запускаются на сервере или удаленном устройстве, выполняют получение данных и отправляют на сервер. Получение данных осуществляется несколькими способами: прямым запросом, прокси или QueryCommunicator.  Обработка данных (парсинг) использует Selenium и Firefox. \n\tПодсистема уведомления рассылает полученные объявления в нужные каналы или подписчикам (например в телеграм) \n\tТакое разделение позволяет менять отдельные модули (например смена алгоритма парсинга), и расширять систему в случае новых источников данных. ",
      "technology": "python, django-rest, selenium "
    }
  },
  {
    "name": "QueryCommunicator",
    "work_period": "2021",
    "site": "",
    "description": {
      "description": "Система распределённых запросов позволяет проксировать целевые запросы и выполнять их через удалённые устройства.\n\nПровайдер (любое внешнее приложение ) делает запрос к серверу query communicator (наприер HTTP.GET) и ожидает выполенения. \nСервер создаёт новое событие для нод (удалённых клиентов), клиенты получают и понимают тип команды, выполнять запрос и сырой ответ отправляют серверу. \nПровайдер получает данные и обрабатывает.\nНоды это простейшие клиенты написание на python и c++-17 которые запускаются на роутерах (кросс компиляция, и отсутствие зависимостей), микрокомьютерах и других встраиваемых устройствах и имеют динамические ip, и потребляют минимальные ресурсы. \nТаким образом запросы от провайдеров могут выполнятся одновременно через множество сетей, что обеспечивает нам обход блокировок. Система имеет авторизацию по bearer токену с правами и удобную админку на django ",
      "technology": "python, django, django-rest, docker, docker compose, c++-17"
    }
  },
  {
    "name": "OPC Server UA (open source)",
    "work_period": "2018-2019",
    "site": "https://github.com/OPCFoundation/UA-.NETStandard",
    "description": {
      "description": "\tКомпания ПСС занималась разработкой систем для хуйпойми чео то там. Одной из частей системы является OPC Server. \n\tЯдро сервера распространяется в nuget пакете собраного разработчиками open-source проекта.  Наша команада занималась разработкой дополнительных модулей. Web api для удобного доступа, сохранение и загрузка узлов в долговременоое хранилище. Синхронизация изменений,\n\tОптимизация производительности  \n\tА также запуск на разных ос и с разными источниками данных. \n\tМногие базовые методы были расширены и оптимизировать. При этом сохранаялась  полная  совместимость с оригинальной веткой и регулярно обновлялось ядро.  В результате сервер отлично справлялся с множеством запросов и имел быстрый отклик, а также сохранил первоначальные протоколы доступа. \n\tНаш opc server использовался во многих продуктовых решениях.",
      "technology": "С#, ASP Core (web api), RabbitMQ"
    }
  },
  {
    "name": "Склад. ТСД Сlient\\Server ",
    "work_period": "2016",
    "site": "https://github.com/CoderGosha/DC_DataBrCode",
    "description": {
      "description": "Автоматизация учета металла на складе включает в себя разработку программного обеспечения для терминала сбора данных. ТСД - это мобильные устройства с встроенным сканером штрихкода. Устройства позволяли исключить ручной ввод данных, моментально получать информацию о единице учета, проводить инвентаризацию и другие производственные задачи.  Клиент для устройства был написан на C# .NET Compact 3.5 и общался с сервером SOAP. На производстве существует множество помех для устойчивого wifi сигнала, поэтому терминал умел работать в офлайн режиме. Регулярно обновляя встроенную базу данных (sqlite), в которой хранилось до 100к единиц учета и атрибутов, а также буферизируя операции работа для пользователя была незаметна даже при пропадании сети.  Система была внедрена на крупное металлургическое предприятие. ",
      "technology": "C#, WCF, SOAP, Sqlite, Oracle Database"
    }
  },
  {
    "name": "DataScales",
    "work_period": "2014 - 2015",
    "site": "https://github.com/CoderGosha/DC_DataScales",
    "description": {
      "description": "Система сбора информации с весоизмерительных устройств и контроллеров. Сбор информации осуществлялся при подключении к весам медиа конвертора Moxa NPort в RS232 разъем, и последующем транслировании данных в сеть TCP/IP.  А также подключение весов в сеть через встроенных Ethernet разъёмы и последующий реверс инжиниринг проприентарного протокола.  Система анализировала входные сигналы и формировала историю провесок, а также ретранслировала сырые данные для системы слежения металла или мониторинга на удаленном компьютере. Программное обеспечение было успешно внедрено на нескольких производства крупных металлургических компаний. ",
      "technology": "С++, Oracle Database, Moxa NPort 5150"
    }
  },
  {
    "name": "Bitmexbot",
    "work_period": "2020",
    "site": "",
    "description": {
      "description": "Крипто биржи предоставляют отличное api для торговли роботами. Сложность торговли определяет алгоритм. В данном проекте мы не используем алгоритмы торговли, мы копируем сделки с целевого аккаунта на slave. Используя алгоритм репликации стратегии с нужными коэффициент в зависимости от баланса на счёте. Получая моментальные данные через websocket с целевого аккаунта, мы гарантируем быструю работу копирования. \nПилотный проект был протестирован на крупной бирже. ",
      "technology": "python, websocket, rest api, telegram, docker"
    }
  },
  {
    "name": "AvitoBot ",
    "work_period": "2018-2021",
    "site": "https://github.com/CoderGosha/Py_AvitoEvent",
    "description": {
      "description": "   Сайт avito.ru является лидером по размещения объявления в регионах. Для людей которые часто занимаются покупкой и продажей авто, важно получать актуальную информацию о новых объявлениях.  Авито бот регулярно выполняет парсинг сайта, анализирует новые объявления и  присылает уведомления в телегарм новым клиентам.\nСложных контент сайта выполняет Selenium и Firefox. Для обхода блокировок используется прокси сервера (не очень эффективно), проект QueryCommunicator и запуск локального проекта на Raspberry Pi. В этом случае проект работает с динамическим IP и минимальным количеством запросов (только для клиента)",
      "technology": "python, Selenuim, telegram, Raspberry pi"
    }
  },
  {
    "name": "Backend системы доставки посылок",
    "work_period": "2021-2022",
    "site": "",
    "description": {
      "description": " ",
      "technology": ""
    }
  },
  {
    "name": "Клиент постомата (прототип)",
    "work_period": "2021",
    "site": "",
    "description": {
      "description": " ",
      "technology": "python, qt, Raspberry pi"
    }
  }
]